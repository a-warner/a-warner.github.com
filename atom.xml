<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[a-warner.github.io]]></title>
  <link href="http://a-warner.github.io/atom.xml" rel="self"/>
  <link href="http://a-warner.github.io/"/>
  <updated>2014-08-13T14:25:21-04:00</updated>
  <id>http://a-warner.github.io/</id>
  <author>
    <name><![CDATA[Andrew Warner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git-getpull: Quickly Find the Pull Request That Merged Your Commit to Master]]></title>
    <link href="http://a-warner.github.io/blog/2014/03/06/git-getpull-quickly-find-the-pull-request-that-merged-your-commit-to-master/"/>
    <updated>2014-03-06T14:40:00-05:00</updated>
    <id>http://a-warner.github.io/blog/2014/03/06/git-getpull-quickly-find-the-pull-request-that-merged-your-commit-to-master</id>
    <content type="html"><![CDATA[<p>Check out the embedded git getpull article from Rap Genius below the fold!</p>

<!-- more -->




<div id='rg_embed_link_270809' class='rg_embed_link'>Read <a href="http://news.rapgenius.com/Andrew-warner-git-getpull-quickly-find-the-pull-request-that-merged-your-commit-to-master-annotated">&#8220;Git-getpull: Quickly find the pull request that merged your commit to master&#8221; by Andrew Warner</a> on News Genius</div>


<script src='//news.rapgenius.com/songs/270809/embed.js'></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 3 Ways to Get the Size of an Active Record Relation]]></title>
    <link href="http://a-warner.github.io/blog/2013/04/21/the-3-ways-to-get-the-size-of-an-active-record-relation/"/>
    <updated>2013-04-21T18:14:00-04:00</updated>
    <id>http://a-warner.github.io/blog/2013/04/21/the-3-ways-to-get-the-size-of-an-active-record-relation</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re reading this and your first thought is, &ldquo;there are 3 ways to get the size of a relation?&rdquo;, then
you&rsquo;ve come to the right place! Basically, given a relation like <code>Post.all</code> or <code>User.first.posts</code>, when you
want to know the size, you&rsquo;ve got 3 choices: <code>size</code>, <code>length</code>, and <code>count</code>.  At first glance, it seems like these
might do the same thing, right?  Not so!  There are some key differences between them.</p>

<!-- more -->


<p>TL;DR - use <code>size</code>, it usually &ldquo;Does the Right Thing&rdquo;</p>

<p>First off, some background: both <code>Post.all</code> and <code>User.first.posts</code> are instances of <code>ActiveRecord::Relation</code>,
a very sneaky and
powerful class which manages lazy loading of records from the database. (full disclosure, <code>User.first.posts</code> is
actually an instance of <code>ActiveRecord::Associations::CollectionProxy</code>, but the difference between the two isn&rsquo;t
really relevant to this article).  It makes a best effort to filter, and
order records until the last possible minute when you actually ask for something concrete.  It&rsquo;s that lazy loading
which allows you to write code like <code>Post.where(featured: true).order(created_at: :desc).paginate(page: 1)</code>, which
will generate only one query for the first page of posts.  If you want to get the size of a Relation, there are
3 different ways to ask for it:</p>

<h3>length</h3>

<p>The simplest of the three methods, <code>length</code> is simply delegated to <code>to_a</code> on the collection; in other words, calling
length is equivalent to calling <code>Post.all.to_a.length</code>.  It will query for ALL records, initialize ruby objects for
all of them, and then get the size of the array.  Probably not what you want if you just want to display the count
of the Posts on your blog!</p>

<h3>count</h3>

<p>Does a sql <code>count(*)</code> query for the count of the records in the database.  You probably want to use this method
if you only ever need the count of the records in the association for whatever you&rsquo;re doing.  In the example above,
just displaying a count on the page is a perfect use case for <code>count</code>.</p>

<h3>size</h3>

<p>Size makes a best effort attempt to &ldquo;Do The Right Thing&rdquo; based on the current state of the collection.  Here is the
actual source for size:</p>

<p>From <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation.rb#L205">ActiveRecord::Relation</a>:</p>

<figure class='code'><figcaption><span>lib/active_record/relation.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># Returns size of the records.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">size</span>
</span><span class='line'>    <span class="n">loaded?</span> <span class="p">?</span> <span class="vi">@records</span><span class="o">.</span><span class="n">length</span> <span class="p">:</span> <span class="n">count</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great comment by the way, I never would have known what <code>size</code> did without it.</p>

<p>Basically, size is a heuristic switch between <code>length</code> and <code>count</code>.  If the collection is loaded, it just
gets the length of the loaded array, otherwise it will hit the database with a query.  As pointed out in a
<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/collection_proxy.rb#L677">much more informative comment which is for some reason in the CollectionProxy object instead</a>,
you&rsquo;ll end up with an extra query if you call <code>size</code> and then actually need the elements of the collection later.</p>

<p>In a lot of cases the differences are completely irrelevant, but, for my money, <code>size</code> is the best of the 3 options.
It does the best job of not leaking details about what&rsquo;s going on under the hood in terms of lazy loading in Active
Record.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use the Rails Router for Routing!]]></title>
    <link href="http://a-warner.github.io/blog/2013/04/21/use-the-rails-router-for-routing/"/>
    <updated>2013-04-21T17:41:00-04:00</updated>
    <id>http://a-warner.github.io/blog/2013/04/21/use-the-rails-router-for-routing</id>
    <content type="html"><![CDATA[<p>This is a quick one, and the title says most of it.  Basically, you should never have code like this in
your app:</p>

<figure class='code'><figcaption><span>some_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_action</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">something_about_the_url?</span>
</span><span class='line'>      <span class="n">do_something</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="ss">:foo</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">do_something_else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="ss">:baz</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>The whole point of the router is to handle stuff about the url!  Instead, move whatever the logic inside
<code>something_about_the_url?</code> does upstream to the router layer.  For example, say you want to display a different
home page for www.mysite.com and blog.mysite.com.  This can be accomplished very easily using the router:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">constraints</span> <span class="ss">subdomain</span><span class="p">:</span> <span class="s1">&#39;blog&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;blog#home&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;static#home&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that, in this specific case, you must have the subdomain route above the <code>root</code> route, otherwise the router
will match the route to <code>static#home</code> before it gets to the subdomain constraint.  Remember that the router
checks routes in order.  All set!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Active Record Query Debugging in the Rails Console]]></title>
    <link href="http://a-warner.github.io/blog/2013/03/17/simple-active-record-query-debugging-in-the-rails-console/"/>
    <updated>2013-03-17T18:22:00-04:00</updated>
    <id>http://a-warner.github.io/blog/2013/03/17/simple-active-record-query-debugging-in-the-rails-console</id>
    <content type="html"><![CDATA[<p>Stop me if this sounds familiar.  You&rsquo;re tooling around in the Rails console, testing out some new code you&rsquo;re working on (or debugging some slow/broken code), and you see a ton of repeat queries.</p>

<p>I have this experience frequently; usually I can figure out what&rsquo;s going on, but sometimes it can be quite tricky to track down the source of extra queries.  Whenever I want to figure out where a method is getting called from, one easy and lazy solution is to add a debugger statement in that code.  But where the heck do I add a debugger for sql statements?</p>

<!-- more -->


<p>It turns out that Active Record has a fairly unified choke-point for query execution on a per-model basis - <code>#find_by_sql</code>.  So, now that we know the method, what&rsquo;s the best way to add the debugger statement?  Well, we <em>could</em> just open up the gem code, but then we have to restart our console, and we run the risk of forgetting to remove the statement or otherwise screwing up the gem code in some way that&rsquo;s difficult to track down.  We could monkey patch the method, but even that sounds onerous, especially if we want the method to be usable again without hitting that debugger statement later in our session.</p>

<p>Enter a relatively short addition to your <code>.irbrc</code> or <code>.pryrc</code>!  Simply add the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_debugger</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="n">debugger_method</span> <span class="o">=</span> <span class="nb">binding</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:pry</span><span class="p">)</span> <span class="p">?</span> <span class="s1">&#39;binding.pry&#39;</span> <span class="p">:</span> <span class="s1">&#39;debugger&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">clazz</span><span class="o">.</span><span class="n">method_defined?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>    <span class="n">clazz</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">      def #{method}_with_debugger(*args, &amp;block)</span>
</span><span class='line'><span class="sh">        #{debugger_method}</span>
</span><span class='line'><span class="sh">        #{method}_without_debugger(*args, &amp;block)</span>
</span><span class='line'><span class="sh">      end</span>
</span><span class='line'><span class="sh">      alias_method_chain :#{method}, :debugger</span>
</span><span class='line'><span class="no">    CODE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that my debugger preference is <code>pry</code>, if it&rsquo;s available.  You can of course adjust the above code per your preference.  Now we can simply run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_debugger</span> <span class="no">MyModel</span><span class="o">.</span><span class="n">singleton_class</span><span class="p">,</span> <span class="ss">:find_by_sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running through our problem code again, you should find yourself in the debugger for any queries on <code>MyModel</code>.  Once in the debugger, simply inspect <code>caller</code> to figure out what pesky bit of code is generating all of the extra queries.</p>

<p>This is great, but it would incomplete if we had to restart the server in order to remove the debugger statement!  The following snippet should do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">remove_debugger</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">clazz</span><span class="o">.</span><span class="n">method_defined?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">clazz</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">alias_method</span> <span class="nb">method</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_without_debugger&quot;</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_without_debugger&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just run <code>remove_debugger MyModel.singleton_class, :find_by_sql</code>, and you&rsquo;re back to regular development.</p>

<p>Now that you&rsquo;ve got this method, adding debugging statements to your own code or 3rd party code is a breeze!</p>

<p>Check out my <a href="https://github.com/a-warner/dotfiles/blob/master/.railsrc">.railsrc</a> for more little one-off development helper methods.</p>

<p>Is there an easier way to do this with pry?  Is there a gem that just does this and makes my silly code obsolete?  Let me know in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post]]></title>
    <link href="http://a-warner.github.io/blog/2013/03/17/my-first-blog-post/"/>
    <updated>2013-03-17T18:07:00-04:00</updated>
    <id>http://a-warner.github.io/blog/2013/03/17/my-first-blog-post</id>
    <content type="html"><![CDATA[<p>This is my first blog post! I setup up my blog using <a href="http://octopress.org/">Octopress</a>, which was incredibly easy.  They&rsquo;ve got some great guides on their site, but just to give you a sense of exactly how easy it is, I simply:</p>

<ul>
<li>Created a repository on github named a-warner.github.com - the standard naming conventions that <a href="http://pages.github.com/">Github Pages</a> expects if I want a-warner.github.com to resolve to this blog</li>
<li>Cloned Octopress via <code>git clone git://github.com/imathis/octopress.git a-warner.github.com</code>, ran <code>bundle</code></li>
<li>Next step was to run <code>rake setup_github_pages</code></li>
<li>Then it&rsquo;s as simple as <code>rake generate</code> and <code>rake deploy</code>!</li>
<li>Creating this blog post just involved running <code>rake new_post["My first blog post"]</code></li>
</ul>


<p>The writing process is extremely simple - just run <code>rake preview</code> until it looks right, and then <code>rake deploy</code> after committing your changes.</p>

<p>Not that I should be surprised, but using Octopress is really a breeze, and I highly recommend it to anybody looking to crank out a quick blog with minimal setup and maintenance.</p>
]]></content>
  </entry>
  
</feed>
