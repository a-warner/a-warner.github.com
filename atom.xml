<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew's Thoughts]]></title>
  <link href="http://a-warner.github.com/atom.xml" rel="self"/>
  <link href="http://a-warner.github.com/"/>
  <updated>2013-03-17T19:12:57-04:00</updated>
  <id>http://a-warner.github.com/</id>
  <author>
    <name><![CDATA[Andrew Warner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Active Record Query Debugging in the Rails Console]]></title>
    <link href="http://a-warner.github.com/blog/2013/03/17/simple-active-record-query-debugging-in-the-rails-console/"/>
    <updated>2013-03-17T18:22:00-04:00</updated>
    <id>http://a-warner.github.com/blog/2013/03/17/simple-active-record-query-debugging-in-the-rails-console</id>
    <content type="html"><![CDATA[<p>Stop me if this sounds familiar.  You&#8217;re tooling around in the Rails console, testing out some new code you&#8217;re working on (or debugging some slow/broken code), and you see a ton of repeat queries.</p>

<p>I have this experience frequently; usually I can figure out what&#8217;s going on, but sometimes it can be quite tricky to track down the source of extra queries.  Whenever I want to figure out where a method is getting called from, one easy and lazy solution is to add a debugger statement in that code.  But where the heck do I add a debugger for sql statements?</p>

<!-- more -->


<p>It turns out that Active Record has a fairly unified choke-point for query execution on a per-model basis - <code>#find_by_sql</code>.  So, now that we know the method, what&#8217;s the best way to add the debugger statement?  Well, we <em>could</em> just open up the gem code, but then we have to restart our console, and we run the risk of forgetting to remove the statement or otherwise screwing up the gem code in some way that&#8217;s difficult to track down.  We could monkey patch the method, but even that sounds onerous, especially if we want the method to be usable again without hitting that debugger statement later in our session.</p>

<p>Enter a relatively short addition to your <code>.irbrc</code> or <code>.pryrc</code>!  Simply add the following method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_debugger</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="n">debugger_method</span> <span class="o">=</span> <span class="nb">binding</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:pry</span><span class="p">)</span> <span class="p">?</span> <span class="s1">&#39;binding.pry&#39;</span> <span class="p">:</span> <span class="s1">&#39;debugger&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">clazz</span><span class="o">.</span><span class="n">method_defined?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>    <span class="n">clazz</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">CODE</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">      def #{method}_with_debugger(*args, &amp;block)</span>
</span><span class='line'><span class="sh">        #{debugger_method}</span>
</span><span class='line'><span class="sh">        #{method}_without_debugger(*args, &amp;block)</span>
</span><span class='line'><span class="sh">      end</span>
</span><span class='line'><span class="sh">      alias_method_chain :#{method}, :debugger</span>
</span><span class='line'><span class="no">    CODE</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that my debugger preference is <code>pry</code>, if it&#8217;s available.  You can of course adjust the above code per your preference.  Now we can simply run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_debugger</span> <span class="no">MyModel</span><span class="o">.</span><span class="n">singleton_class</span><span class="p">,</span> <span class="ss">:find_by_sql</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running through our problem code again, you should find yourself in the debugger for any queries on <code>MyModel</code>.  Once in the debugger, simply inspect <code>caller</code> to figure out what pesky bit of code is generating all of the extra queries.</p>

<p>This is great, but it would incomplete if we had to restart the server in order to remove the debugger statement!  The following snippet should do the trick:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">remove_debugger</span><span class="p">(</span><span class="n">clazz</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">clazz</span><span class="o">.</span><span class="n">method_defined?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">clazz</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">alias_method</span> <span class="nb">method</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_without_debugger&quot;</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_with_debugger&quot;</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">_without_debugger&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just run <code>remove_debugger MyModel.singleton_class, :find_by_sql</code>, and you&#8217;re back to regular development.</p>

<p>Now that you&#8217;ve got this method, adding debugging statements to your own code or 3rd party code is a breeze!</p>

<p>Check out my <a href="https://github.com/a-warner/dotfiles/blob/master/.railsrc">.railsrc</a> for more little one-off development helper methods.</p>

<p>Is there an easier way to do this with pry?  Is there a gem that just does this and makes my silly code obsolete?  Let me know in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first blog post]]></title>
    <link href="http://a-warner.github.com/blog/2013/03/17/my-first-blog-post/"/>
    <updated>2013-03-17T18:07:00-04:00</updated>
    <id>http://a-warner.github.com/blog/2013/03/17/my-first-blog-post</id>
    <content type="html"><![CDATA[<p>This is my first blog post! I setup up my blog using <a href="http://octopress.org/">Octopress</a>, which was incredibly easy.  They&#8217;ve got some great guides on their site, but just to give you a sense of exactly how easy it is, I simply:</p>

<ul>
<li>Created a repository on github named a-warner.github.com - the standard naming conventions that <a href="http://pages.github.com/">Github Pages</a> expects if I want a-warner.github.com to resolve to this blog</li>
<li>Cloned Octopress via <code>git clone git://github.com/imathis/octopress.git a-warner.github.com</code>, ran <code>bundle</code></li>
<li>Next step was to run <code>rake setup_github_pages</code></li>
<li>Then it&#8217;s as simple as <code>rake generate</code> and <code>rake deploy</code>!</li>
<li>Creating this blog post just involved running <code>rake new_post["My first blog post"]</code></li>
</ul>


<p>The writing process is extremely simple - just run <code>rake preview</code> until it looks right, and then <code>rake deploy</code> after committing your changes.</p>

<p>Not that I should be surprised, but using Octopress is really a breeze, and I highly recommend it to anybody looking to crank out a quick blog with minimal setup and maintenance.</p>
]]></content>
  </entry>
  
</feed>
